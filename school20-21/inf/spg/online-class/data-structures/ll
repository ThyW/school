#! /usr/bin/env python3 

class Node:
    def __init__(self, val):
        self.val = val
        self.next = None

class LL:
    def __init__(self):
        self.head: "Node" = None

    def insert(self, n: int):
        if self.head == None:
            self.head = Node(n)
        else:
            cur = self.head
            while cur.next != None:
                cur = cur.next
            cur.next = Node(n)
   
    def delete(self, n: int):
        if self.head == None:
          return
        if self.head.val == n:
            self.head = self.head.next
        else:
            if self.head.next != None:
                curr = self.head
                while curr.next.val != n:
                    curr = curr.next
                if curr.next.next != None:
                    join = curr.next.next 
                    curr.next = join
                else:
                    curr.next = None
    def print(self):
        cur = self.head
        while cur != None:
            print(cur.val,)
            cur = cur.next
    def prepend(self, n):
        if self.head != None:
            was = self.head
            node = Node(n)
            node.next = was
            self.head = node

    def find(self, value) -> Node: 
        cur = self.head
        if cur.val == value:
            return cur
        while cur.val != value:
            cur = cur.next
            if cur.val != None and cur.val == value:
                return cur
                break

l = LL()

l.insert(3)
l.insert(6)
l.insert(9)
l.delete(6)
l.prepend(1)


l.print()

print(l.find(1).val)
